{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","state","flag","Flag","isEdit","setState","updateTodo","e","preventDefault","todoUp","props","todo","content","input","value","editTodo","id","renderTodo","className","key","console","log","icon","faCheck","color","size","onClick","doneTodo","style","cursor","faEdit","faTrash","deleteTodo","renderUpdate","onSubmit","type","ref","v","defaultValue","this","Component","AddTodo","handleChange","target","handleSubmit","addTodo","handleUpdate","onChange","App","todos","counter","current","filter","totalCounter","RegExp","test","Math","random","todoEdit","todosList","map","currentTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.159aee08.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport './Todos.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faCheck, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Todos extends Component{\r\nstate={\r\n    flag : true,\r\n}\r\n\r\n     Flag=()=>{\r\n    let isEdit=this.state.flag\r\n       this.setState({\r\n         flag:!isEdit\r\n       })\r\n    }\r\n    updateTodo=(e)=>{\r\n        e.preventDefault();\r\n        let todoUp=this.props.todo;\r\n        todoUp.content=this.input.value\r\n        this.props.editTodo(this.props.todo.id,todoUp);\r\n        this.Flag();\r\n    }\r\n\r\n\r\n    renderTodo=()=>{\r\n    return(\r\n        <div>\r\n            <div className=\"row \" key={this.props.todo.id}>\r\n                <div className=\"col-7 \">\r\n                    <p >- {this.props.todo.content} </p>\r\n                </div>\r\n                <div>\r\n                    {console.log(this.props.todo.content)}\r\n                </div>\r\n                <div className=\"col-5  text-right\">\r\n                <FontAwesomeIcon className=\"fontIcon mr-2 \" icon={faCheck} color='#23df23' size='10rem'\r\n                                 onClick={()=>{this.props.doneTodo(this.props.todo.id)}} style={{cursor: 'pointer'}} />\r\n\r\n                <FontAwesomeIcon className=\"fontIcon mr-2\" icon={faEdit} color='white' size='10rem'\r\n                                 onClick={()=>{this.Flag()}} style={{cursor: 'pointer'}} />\r\n\r\n                <FontAwesomeIcon className=\"fontIcon mr-2\" icon={faTrash} color='red' size='10rem'\r\n                                 onClick={()=>{this.props.deleteTodo(this.props.todo.id)}} style={{cursor: 'pointer'}} />\r\n                </div>\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n    }\r\n\r\n\r\n\r\n    renderUpdate=()=> {\r\n    return(\r\n        <form onSubmit={this.updateTodo}>\r\n            <div >\r\n                <input className=\"mr-auto pl-2 mb-0 \" type=\"text\" ref={(v)=>{this.input=v}} defaultValue={this.props.todo.content}/>\r\n                <button className=\"ml-2 \" onClick={this.updateTodo}>Edit</button>\r\n            </div>\r\n\r\n        </form>\r\n        )\r\n    }\r\n\r\n\r\n\r\n        render() {\r\n    let {flag}=this.state\r\n    return(\r\n        <div>\r\n            <div>\r\n                {console.log(this.props.todo)}\r\n                {flag ?this.renderTodo():this.renderUpdate()}\r\n                <div className=\"hr\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n    }\r\nexport default Todos;\r\n","import React, {Component} from 'react';\r\nimport './AddTodo.css'\r\nimport { useAlert } from 'react-alert'\r\n\r\nclass AddTodo extends Component{\r\n    state={\r\n        content:'',\r\n    }\r\n    handleChange =(e)=>{\r\n        this.setState({\r\n            content:e.target.value\r\n        })\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content:''\r\n        })\r\n\r\n    }\r\n    handleUpdate =(todo)=> {\r\n    this.setState({\r\n        content:todo.content\r\n    })\r\n    }\r\n\r\n        render() {\r\n        return (\r\n            <div>\r\n                <form  onSubmit={this.handleSubmit}>\r\n                    <input className=\"mr-auto\" type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n                    {/*<a className=\"waves-effect waves-light btn blue\"onClick={this.handleSubmit} >Add</a>*/}\r\n                    <button className=\" ml-2\">Add</button>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, {Component, useState} from 'react';\nimport Todos from './Todos'\nimport AddTodo from \"./AddTodo\";\nimport './App.css'\n\n\nclass App extends Component{\n\n  state ={\n    todos :[\n      {id:1 , content:\"buy some milk\"},\n      {id:2 , content:\"play game\"},\n      {id:3 , content:\"buy some milk\"},\n      {id:4 , content:\"play game\"},\n      {id:5 , content:\"buy some milk\"},\n      {id:6 , content:\"play game\"}\n    ],\n    counter:0,\n    current:''\n  }\n\n  deleteTodo=(id)=>{\n    const todos= this.state.todos.filter( todo=>{\n      return todo.id !==id\n    });\n    this.setState({\n      todos:todos,\n    })\n  }\n  doneTodo=(id)=>{\n    let totalCounter=this.state.counter+1;\n    const todos= this.state.todos.filter( todo=>{\n      return todo.id !==id\n    });\n    this.setState({\n      todos:todos,\n      counter:totalCounter\n    })\n    console.log(this.state.counter)\n  }\n  addTodo=(todo)=>{\n    var patt = new RegExp(\"[A-z]\");\n    var res = patt.test(todo.content);\n    if(res){\n      todo.id=Math.random();\n      let todos=[...this.state.todos,todo];\n      this.setState({\n        todos:todos,\n      })\n      }\n  }\n\n  editTodo=(id,todoEdit)=>{\n    const todos=this.state.todos;\n    const todosList=todos.map(todo=>{\n      return id===todo.id?todoEdit:todo\n    })\n    this.setState({\n      todos: todosList\n    })\n  }\n\n\n  render() {\n    const todosL=this.state.todos;\n    const todosList=todosL.map(todo=>{\n      return  <Todos todo={todo} deleteTodo={this.deleteTodo}\n                     editTodo={this.editTodo} doneTodo={this.doneTodo}/>\n    })\n    return (\n        <div>\n\n          <div className=\"container-fluid\">\n            <div className='app-wrapper '>\n              <div className=\"row \">\n                <h1 className=\"col-10 mb-4\">React ToDo</h1>\n                <h1 className=\"counter\">{this.state.counter}</h1>\n              </div>\n                <AddTodo addTodo={this.addTodo} currentTodo={this.currentTodo} />\n              {todosList}\n            </div>\n\n          </div>\n\n        </div>\n            );\n  }\n\n}\n\nexport default App;\n// <h1 className=\" blue-text center\">Todo's</h1>\n// <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n// <AddTodo addTodo={this.addTodo} />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    position: 'bottom center',\n    timeout: 5000,\n    offset: '30px',\n    transition: 'scale'\n}\n\nconst Root = () => (\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App />\n    </AlertProvider>\n)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}